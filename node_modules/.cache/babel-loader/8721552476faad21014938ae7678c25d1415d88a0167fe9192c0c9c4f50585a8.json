{"ast":null,"code":"var _jsxFileName = \"G:\\\\GitHub\\\\MESTODLE\\\\frontend\\\\src\\\\components\\\\AutoCompleteTextBox.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutoCompleteTextBox = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [cities, setCities] = useState([]);\n  useEffect(() => {\n    if (searchTerm) {\n      // Only start searching if searchTerm has been entered\n      const fetchCities = async () => {\n        try {\n          const response = await axios.get(`http://localhost:8081/api/mesta?term=${searchTerm}`);\n          setCities(response.data);\n        } catch (error) {\n          console.error('Error fetching cities:', error);\n        }\n      };\n      fetchCities();\n    } else {\n      setCities([]); // Clear cities if the search term is cleared\n    }\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      placeholder: \"Enter city...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), cities.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: cities.map(city => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: city.nazev\n      }, city.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this) // Assuming your cities have an 'id' and 'nazev'\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(AutoCompleteTextBox, \"AMY1nK0wKe6pGicDBnXJqW8u/VQ=\");\n_c = AutoCompleteTextBox;\nexport default AutoCompleteTextBox;\nvar _c;\n$RefreshReg$(_c, \"AutoCompleteTextBox\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","AutoCompleteTextBox","_s","searchTerm","setSearchTerm","cities","setCities","fetchCities","response","get","data","error","console","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","map","city","nazev","id","_c","$RefreshReg$"],"sources":["G:/GitHub/MESTODLE/frontend/src/components/AutoCompleteTextBox.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst AutoCompleteTextBox = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [cities, setCities] = useState([]);\n\n  useEffect(() => {\n    if (searchTerm) {\n      // Only start searching if searchTerm has been entered\n      const fetchCities = async () => {\n        try {\n          const response = await axios.get(`http://localhost:8081/api/mesta?term=${searchTerm}`);\n          setCities(response.data);\n        } catch (error) {\n          console.error('Error fetching cities:', error);\n        }\n      };\n\n      fetchCities();\n    } else {\n      setCities([]); // Clear cities if the search term is cleared\n    }\n  }, [searchTerm]);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        placeholder=\"Enter city...\"\n      />\n      {cities.length > 0 && (\n        <ul>\n          {cities.map((city) => (\n            <li key={city.id}>{city.nazev}</li> // Assuming your cities have an 'id' and 'nazev'\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default AutoCompleteTextBox;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,IAAIM,UAAU,EAAE;MACd;MACA,MAAMI,WAAW,GAAG,MAAAA,CAAA,KAAY;QAC9B,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,wCAAuCN,UAAW,EAAC,CAAC;UACtFG,SAAS,CAACE,QAAQ,CAACE,IAAI,CAAC;QAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAChD;MACF,CAAC;MAEDJ,WAAW,CAAC,CAAC;IACf,CAAC,MAAM;MACLD,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC;EAEhB,oBACEH,OAAA;IAAAa,QAAA,gBACEb,OAAA;MACEc,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEZ,UAAW;MAClBa,QAAQ,EAAGC,CAAC,IAAKb,aAAa,CAACa,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC/CI,WAAW,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EACDlB,MAAM,CAACmB,MAAM,GAAG,CAAC,iBAChBxB,OAAA;MAAAa,QAAA,EACGR,MAAM,CAACoB,GAAG,CAAEC,IAAI,iBACf1B,OAAA;QAAAa,QAAA,EAAmBa,IAAI,CAACC;MAAK,GAApBD,IAAI,CAACE,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CAAC,CAAC;MACrC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrB,EAAA,CAvCID,mBAAmB;AAAA4B,EAAA,GAAnB5B,mBAAmB;AAyCzB,eAAeA,mBAAmB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}