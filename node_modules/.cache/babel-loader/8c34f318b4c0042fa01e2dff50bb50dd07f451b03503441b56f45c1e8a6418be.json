{"ast":null,"code":"var _jsxFileName = \"G:\\\\GitHub\\\\MESTODLE\\\\frontend\\\\src\\\\components\\\\AutoCompleteTextBox.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './AutoCompleteTextBox.css'; // Make sure your CSS file is correctly referenced\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutoCompleteTextBox = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [cities, setCities] = useState([]);\n  useEffect(() => {\n    if (searchTerm) {\n      const fetchCities = async () => {\n        try {\n          const response = await axios.get(`http://localhost:8081/api/mesta?term=${searchTerm}`);\n          console.log(\"Cities:\", response.data); // Log the cities\n          setCities(response.data);\n        } catch (error) {\n          console.error('Error fetching cities:', error);\n        }\n      };\n      const timerId = setTimeout(fetchCities, 500);\n      return () => clearTimeout(timerId);\n    } else {\n      setCities([]); // Clear suggestions when input is empty\n    }\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      placeholder: \"Enter city...\",\n      className: \"autocomplete-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), searchTerm && cities.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"autocomplete-results\",\n      children: cities.map(city => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"autocomplete-item\",\n        children: city.nazev\n      }, city.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(AutoCompleteTextBox, \"AMY1nK0wKe6pGicDBnXJqW8u/VQ=\");\n_c = AutoCompleteTextBox;\nexport default AutoCompleteTextBox;\nvar _c;\n$RefreshReg$(_c, \"AutoCompleteTextBox\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","AutoCompleteTextBox","_s","searchTerm","setSearchTerm","cities","setCities","fetchCities","response","get","console","log","data","error","timerId","setTimeout","clearTimeout","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","map","city","nazev","id","_c","$RefreshReg$"],"sources":["G:/GitHub/MESTODLE/frontend/src/components/AutoCompleteTextBox.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './AutoCompleteTextBox.css'; // Make sure your CSS file is correctly referenced\n\nconst AutoCompleteTextBox = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [cities, setCities] = useState([]);\n\n  useEffect(() => {\n    if (searchTerm) {\n        const fetchCities = async () => {\n            try {\n                const response = await axios.get(`http://localhost:8081/api/mesta?term=${searchTerm}`);\n                console.log(\"Cities:\", response.data); // Log the cities\n                setCities(response.data);\n            } catch (error) {\n                console.error('Error fetching cities:', error);\n            }\n        };\n\n        const timerId = setTimeout(fetchCities, 500);\n        return () => clearTimeout(timerId);\n    } else {\n        setCities([]); // Clear suggestions when input is empty\n    }\n}, [searchTerm]);\n\n\n  return (\n    <div className=\"autocomplete\">\n      <input\n        type=\"text\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        placeholder=\"Enter city...\"\n        className=\"autocomplete-input\"\n      />\n      {searchTerm && cities.length > 0 && (\n        <ul className=\"autocomplete-results\">\n          {cities.map((city) => (\n            <li key={city.id} className=\"autocomplete-item\">\n              {city.nazev}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default AutoCompleteTextBox;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,2BAA2B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,IAAIM,UAAU,EAAE;MACZ,MAAMI,WAAW,GAAG,MAAAA,CAAA,KAAY;QAC5B,IAAI;UACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,wCAAuCN,UAAW,EAAC,CAAC;UACtFO,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;UACvCN,SAAS,CAACE,QAAQ,CAACI,IAAI,CAAC;QAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAClD;MACJ,CAAC;MAED,MAAMC,OAAO,GAAGC,UAAU,CAACR,WAAW,EAAE,GAAG,CAAC;MAC5C,OAAO,MAAMS,YAAY,CAACF,OAAO,CAAC;IACtC,CAAC,MAAM;MACHR,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IACnB;EACJ,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC;EAGd,oBACEH,OAAA;IAAKiB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BlB,OAAA;MACEmB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEjB,UAAW;MAClBkB,QAAQ,EAAGC,CAAC,IAAKlB,aAAa,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC/CI,WAAW,EAAC,eAAe;MAC3BP,SAAS,EAAC;IAAoB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,EACDzB,UAAU,IAAIE,MAAM,CAACwB,MAAM,GAAG,CAAC,iBAC9B7B,OAAA;MAAIiB,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EACjCb,MAAM,CAACyB,GAAG,CAAEC,IAAI,iBACf/B,OAAA;QAAkBiB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC5Ca,IAAI,CAACC;MAAK,GADJD,IAAI,CAACE,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA5CID,mBAAmB;AAAAiC,EAAA,GAAnBjC,mBAAmB;AA8CzB,eAAeA,mBAAmB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}