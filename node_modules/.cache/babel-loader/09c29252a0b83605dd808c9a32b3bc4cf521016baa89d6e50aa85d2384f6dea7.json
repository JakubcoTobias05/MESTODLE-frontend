{"ast":null,"code":"var _jsxFileName = \"G:\\\\GitHub\\\\MESTODLE\\\\frontend\\\\src\\\\components\\\\AutoCompleteTextBox.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutoCompleteTextBox = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  useEffect(() => {\n    const loadSuggestions = async () => {\n      if (searchTerm) {\n        try {\n          // Replace 'nazev' with the correct column name from your database if different.\n          const response = await axios.get(`http://localhost:8081/api/mesta?term=${searchTerm}`);\n          setSuggestions(response.data);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    };\n\n    // Debounce the search to avoid too many requests\n    const debounce = setTimeout(() => loadSuggestions(), 300);\n\n    // Clear the debounce timeout on cleanup\n    return () => clearTimeout(debounce);\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      placeholder: \"Enter city name...\",\n      className: \"autocomplete-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), searchTerm && suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"autocomplete-results\",\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"autocomplete-item\",\n        children: suggestion.nazev\n      }, suggestion.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(AutoCompleteTextBox, \"MEzfNgh2mNJZ8GpZWQ8coQHpFa0=\");\n_c = AutoCompleteTextBox;\nexport default AutoCompleteTextBox;\nvar _c;\n$RefreshReg$(_c, \"AutoCompleteTextBox\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","AutoCompleteTextBox","_s","searchTerm","setSearchTerm","suggestions","setSuggestions","loadSuggestions","response","get","data","error","console","debounce","setTimeout","clearTimeout","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","map","suggestion","nazev","id","_c","$RefreshReg$"],"sources":["G:/GitHub/MESTODLE/frontend/src/components/AutoCompleteTextBox.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst AutoCompleteTextBox = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  useEffect(() => {\n    const loadSuggestions = async () => {\n      if (searchTerm) {\n        try {\n          // Replace 'nazev' with the correct column name from your database if different.\n          const response = await axios.get(`http://localhost:8081/api/mesta?term=${searchTerm}`);\n          setSuggestions(response.data);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      } else {\n        setSuggestions([]);\n      }\n    };\n\n    // Debounce the search to avoid too many requests\n    const debounce = setTimeout(() => loadSuggestions(), 300);\n\n    // Clear the debounce timeout on cleanup\n    return () => clearTimeout(debounce);\n  }, [searchTerm]);\n\n  return (\n    <div className=\"autocomplete\">\n      <input\n        type=\"text\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        placeholder=\"Enter city name...\"\n        className=\"autocomplete-input\"\n      />\n      {searchTerm && suggestions.length > 0 && (\n        <ul className=\"autocomplete-results\">\n          {suggestions.map((suggestion) => (\n            <li key={suggestion.id} className=\"autocomplete-item\">\n              {suggestion.nazev}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default AutoCompleteTextBox;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAIJ,UAAU,EAAE;QACd,IAAI;UACF;UACA,MAAMK,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,wCAAuCN,UAAW,EAAC,CAAC;UACtFG,cAAc,CAACE,QAAQ,CAACE,IAAI,CAAC;QAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C;MACF,CAAC,MAAM;QACLL,cAAc,CAAC,EAAE,CAAC;MACpB;IACF,CAAC;;IAED;IACA,MAAMO,QAAQ,GAAGC,UAAU,CAAC,MAAMP,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;;IAEzD;IACA,OAAO,MAAMQ,YAAY,CAACF,QAAQ,CAAC;EACrC,CAAC,EAAE,CAACV,UAAU,CAAC,CAAC;EAEhB,oBACEH,OAAA;IAAKgB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BjB,OAAA;MACEkB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEhB,UAAW;MAClBiB,QAAQ,EAAGC,CAAC,IAAKjB,aAAa,CAACiB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC/CI,WAAW,EAAC,oBAAoB;MAChCP,SAAS,EAAC;IAAoB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,EACDxB,UAAU,IAAIE,WAAW,CAACuB,MAAM,GAAG,CAAC,iBACnC5B,OAAA;MAAIgB,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EACjCZ,WAAW,CAACwB,GAAG,CAAEC,UAAU,iBAC1B9B,OAAA;QAAwBgB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAClDa,UAAU,CAACC;MAAK,GADVD,UAAU,CAACE,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAElB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACzB,EAAA,CA9CID,mBAAmB;AAAAgC,EAAA,GAAnBhC,mBAAmB;AAgDzB,eAAeA,mBAAmB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}